name: Test model
inputs:
- {name: data, type: String}
- {name: dat, type: String}
outputs:
- {name: out, type: String}
implementation:
  container:
    image: tensorflow/tensorflow:latest-gpu-py3
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'pandas==0.23.4' 'scikit-learn==0.22' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3
      -m pip install --quiet --no-warn-script-location 'pandas==0.23.4' 'scikit-learn==0.22'
      --user) && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - |
      def _make_parent_dirs_and_return_path(file_path: str):
          import os
          os.makedirs(os.path.dirname(file_path), exist_ok=True)
          return file_path

      def test_model(data_path, dat_path, out_path):
        import sys, subprocess
        subprocess.run([sys.executable, "-m", "pip", "install", "scikit-learn==0.22"])
        subprocess.run([sys.executable, "-m", "pip", "install", "numpy"])
        subprocess.run([sys.executable, "-m", "pip", "install", "pandas"])
        import numpy as np
        import pandas as pd
        import pickle
        from sklearn.linear_model import LogisticRegression
        from sklearn.metrics import confusion_matrix,classification_report, accuracy_score
        with open(data_path,'rb') as f:
            data = pickle.load(f)
        with open(dat_path,'rb') as f:
            model = pickle.load(f)
        Y_pred = model.predict(data["test"]["X"])
        score = accuracy_score(data["test"]["y"], Y_pred)
        cm = confusion_matrix(data["test"]["y"], Y_pred)
        cr = classification_report(data["test"]["y"], Y_pred, target_names=['No', 'Yes'])
        data = {"score":score, "cm":cm,"cr":cr}
        with open(out_path,'wb') as f:
          pickle.dump((data),f)

      import argparse
      _parser = argparse.ArgumentParser(prog='Test model', description='')
      _parser.add_argument("--data", dest="data_path", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--dat", dest="dat_path", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--out", dest="out_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
      _parsed_args = vars(_parser.parse_args())

      _outputs = test_model(**_parsed_args)
    args:
    - --data
    - {inputPath: data}
    - --dat
    - {inputPath: dat}
    - --out
    - {outputPath: out}
