name: Preprocessing
inputs:
- {name: data, type: pkl}
outputs:
- {name: out, type: pkl}
implementation:
  container:
    image: tensorflow/tensorflow:latest-gpu-py3
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'pandas==0.23.4' 'scikit-learn==0.22' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3
      -m pip install --quiet --no-warn-script-location 'pandas==0.23.4' 'scikit-learn==0.22'
      --user) && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - "def _make_parent_dirs_and_return_path(file_path: str):\n    import os\n   \
      \ os.makedirs(os.path.dirname(file_path), exist_ok=True)\n    return file_path\n\
      \ndef preprocessing(data_path, out_path):\n  import sys, subprocess\n  subprocess.run([sys.executable,\
      \ \"-m\", \"pip\", \"install\", \"scikit-learn==0.22\"])\n  subprocess.run([sys.executable,\
      \ \"-m\", \"pip\", \"install\", \"numpy\"])\n  subprocess.run([sys.executable,\
      \ \"-m\", \"pip\", \"install\", \"pandas\"])\n  import pickle\n  import numpy\
      \ as np\n  import pandas as pd\n  from sklearn.preprocessing import MinMaxScaler\n\
      \  from sklearn.model_selection import train_test_split\n  with open(data_path,'rb')\
      \ as f:\n    df = pickle.load(f)\n\n  #dropping features that are not needful\
      \ for our analysis\n  df.drop(columns=['RowNumber', 'CustomerId', 'Surname'],\
      \ inplace=True)\n  # Age Feature Enhancement  \n  age_labels = ['18-20', '21-30',\
      \ '31-40', '41-50', '51-60', '61-70', '71-80', '81-90', '91-100']\n  Age_group\
      \ = pd.cut(df['Age'], range(10, 101, 10), right=False, labels=age_labels)\n\
      \  df['Age_grp'] = Age_group\n  #One hot encoding of categorical features\n\
      \  df_geo = pd.get_dummies(df['Geography'], columns= df.Geography[0], dtype=\
      \ 'int64')\n  df_gender = pd.get_dummies(df['Gender'], columns= df.Gender[0],\
      \ dtype= 'int64')\n  df = df.join(df_geo)\n  df = df.join(df_gender)\n  #drop\
      \ the unneeded columns\n  df.drop('Geography', axis = 1, inplace = True)\n \
      \ df.drop('Gender', axis = 1, inplace = True)\n  df.drop('Age_grp', axis = 1,\
      \ inplace = True)\n  scaler = MinMaxScaler()\n  columns = ['CreditScore', 'Balance',\
      \ 'EstimatedSalary']\n  for col in columns:\n    column = scaler.fit_transform(df[col].values.reshape(-1,\
      \ 1))\n    df[col] = pd.DataFrame(data=column, columns=[col])\n  #Create training\
      \ and testing sets\n\n  y = df.loc[:,'Exited']\n  X = df.drop('Exited', axis\
      \ = 1)\n\n  X_train, X_test, y_train, y_test = train_test_split(X, y, test_size\
      \ = 0.2, random_state=42)\n  data = {\"train\": {\"X\": X_train, \"y\": y_train},\"\
      test\": {\"X\": X_test, \"y\": y_test}}      \n\n  with open(out_path,'wb')\
      \ as f:\n    pickle.dump((data),f)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Preprocessing',\
      \ description='')\n_parser.add_argument(\"--data\", dest=\"data_path\", type=str,\
      \ required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--out\"\
      , dest=\"out_path\", type=_make_parent_dirs_and_return_path, required=True,\
      \ default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n\
      _outputs = preprocessing(**_parsed_args)\n"
    args:
    - --data
    - {inputPath: data}
    - --out
    - {outputPath: out}
